{"version":3,"sources":["logo.svg","components/Header.js","components/Stocks.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","this","props","title","React","Component","StocksFromAlphaVantage","body","currentPriceToShow","amount","stockTotalValueToShow","onClick","delete","Portfolio","state","addStockVisible","addGraphVisible","showUSD","addStock","stockArray","length","alert","getStockData","newStock","element","target","value","toUpperCase","newStockAmount","setGraphStartDate","startDate","generateGraphLines","generateGraphRows","setGraphEndDate","lastDate","changeChecked","checkedArray","includes","id","isChecked","indexToBeRemoved","i","splice","push","deleteStock","index","copyStockArray","Object","assign","setState","changeExchangeRateUSDEUR","getExchangeRateUSDEUR","changeExchangeRateEURUSD","getExchangeRateEURUSD","calculatePortfolioPrice","totalValue","getCheckedStatus","key","createListOfStocks","table","type","defaultChecked","onChange","name","rows","count","rowcount","longestStockIndex","currentLongestLength","k","date","dailyData","unshift","timeSeries","stock","close","test","StockId","lastRefreshed","Date","metaData","columns","fieldname","stockAlreadyExists","j","symbol","url","concat","fetch","response","json","data","loading","undefined","isNaN","substring","Math","round","setDate","getDate","toLocaleDateString","copyCheckedArray","rate","parseFloat","newPrice","console","log","map","bind","data-modal-target","e","onBlur","width","max-width","height","margin","top","right","left","bottom","dataKey","domain","strokeDasharray","dot","defaultValue","App","deletePortfolio","copyPortfolioArray","portfolioArray","newPortfolio","addPortfolio","alreadyExists","toLowerCase","portfolioId","changePortfolioPrice","totalPrice","portfolioPrice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,iQCG9BC,EAAb,iLAEI,OACE,4BAAQC,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,wBAAIH,UAAU,aAAaI,KAAKC,MAAMC,OAAY,SAN1D,GAA4BC,IAAMC,W,yBCDbC,E,iLAEjB,OAEE,uCACUL,KAAKC,MAAMK,KADrB,mBAC2CN,KAAKC,MAAMM,mBAAoB,IAD1E,WAEWP,KAAKC,MAAMO,OAFtB,gBAE2C,IACxCR,KAAKC,MAAMQ,sBACZ,4BAAQC,QAASV,KAAKC,MAAMU,QAA5B,U,GAR4CR,IAAMC,W,iBCarCQ,G,mBACnB,aAAe,IAAD,8BACZ,+CAyBFC,MAAQ,CACNC,iBAAiB,GA3BL,EA+BdD,MAAQ,CACNE,iBAAiB,GAhCL,EAoCdF,MAAQ,CACNG,SAAS,GArCG,EA2CdC,SAAW,WACL,EAAKJ,MAAMK,WAAWC,QAAU,GAClCC,MAAM,sDAGN,EAAKC,gBAhDK,EAqDdC,SAAW,SAAAC,GACT,EAAKjB,KAAOiB,EAAQC,OAAOC,MAAMC,eAtDrB,EA0DdC,eAAiB,SAAAJ,GACf,EAAKf,OAASe,EAAQC,OAAOC,OA3DjB,EA+DdG,kBAAoB,SAAAL,GAClB,EAAKM,UAAYN,EAAQC,OAAOC,MAChC,EAAKK,qBACL,EAAKC,qBAlEO,EAsEdC,gBAAkB,SAAAT,GAChB,EAAKU,SAAWV,EAAQC,OAAOC,MAC/B,EAAKK,qBACL,EAAKC,qBAzEO,EA6EdG,cAAgB,SAAAX,GACd,GAAI,EAAKV,MAAMsB,aAAaC,SAASb,EAAQC,OAAOa,IAAK,CACvD,EAAKC,WAAY,EAEjB,IADA,IAAIC,EAAmB,EACdC,EAAI,EAAGA,EAAI,EAAK3B,MAAMsB,aAAahB,OAAQqB,IAC9C,EAAK3B,MAAMsB,aAAaK,KAAOjB,EAAQC,OAAOa,KAChDE,EAAmBC,GAGvB,EAAK3B,MAAMsB,aAAaM,OAAOF,EAAkB,QAEjD,EAAKD,WAAY,EACjB,EAAKzB,MAAMsB,aAAaO,KAAKnB,EAAQC,OAAOa,KAzFlC,EA8FdM,YAAc,SAAAC,GACZ,IAAMC,EAAiBC,OAAOC,OAAO,GAAI,EAAKlC,MAAMK,YACpD2B,EAAeJ,OAAOG,EAAO,GAC7B,EAAKI,SAAS,CACZ9B,WAAY2B,KAlGF,EAkMdI,yBAA2B,WACzB,EAAKD,SAAS,CAAEhC,SAAS,GAAS,EAAKkC,wBAnM3B,EA4NdC,yBAA2B,WACzB,EAAKH,SAAS,CAAEhC,SAAS,IACzB,EAAKoC,yBA9NO,EAuPdC,wBAA0B,WAExB,IADA,IAAIC,EAAa,EACRd,EAAI,EAAGA,EAAI,EAAK3B,MAAMK,WAAWC,OAAQqB,IAChDc,GAAc,EAAKzC,MAAMK,WAAWsB,GAAG/B,sBAEzC,OAAO6C,GA5PK,EAgQdC,iBAAmB,SAAAC,GACjB,QAAI,EAAK3C,MAAMsB,aAAaC,SAASoB,IAjQzB,EAyQdC,mBAAqB,WAEnB,IADA,IAAIC,EAAQ,GACHlB,EAAI,EAAGA,EAAI,EAAK3B,MAAMK,WAAWC,OAAQqB,IAChDkB,EAAMhB,KAAK,8BACXgB,EAAMhB,KACJ,wBAAIc,IAAK,EAAK3C,MAAMK,WAAWsB,GAAGlC,MAChC,2BACEqD,KAAK,WACLC,eAAgB,EAAKL,iBACnB,EAAK1C,MAAMK,WAAWsB,GAAGlC,MAE3BuD,SAAU,EAAK3B,cACf4B,KAAM,EAAKjD,MAAMK,WAAWsB,GAAGlC,KAC/B+B,GAAI,EAAKxB,MAAMK,WAAWsB,GAAGlC,SAInCoD,EAAMhB,KACJ,wBAAIc,IAAK,EAAK3C,MAAMK,WAAWsB,GAAGlC,MAC/B,EAAKO,MAAMK,WAAWsB,GAAGlC,OAIhC,OAAOoD,GAhSK,EAoSd3B,kBAAoB,WASlB,IARA,IAAMgC,EAAO,GACTC,EAAQ,EACRC,EAAW,EACXC,EAAoB,EACpB/C,EAAS,EACTgD,EAAuB,EAGlBC,EAAI,EAAGA,EAAI,EAAKvD,MAAMK,WAAWC,OAAQiD,IAChD,GAAI,EAAKvD,MAAMsB,aAAaC,SAAS,EAAKvB,MAAMK,WAAWkD,GAAG9D,MAAO,CACnE,IAAK,IAAI+D,KAAQ,EAAKxD,MAAMK,WAAWkD,GAAGE,UACxCnD,GAAU,EAERA,EAASgD,IACXA,EAAuBhD,EACvB+C,EAAoBE,GAEtBjD,EAAS,EAIa,IAAtB+C,IACF,EAAKrD,MAAMK,WAAWqD,QAAQ,EAAK1D,MAAMK,WAAWgD,IACpDA,GAAqB,EACrB,EAAKrD,MAAMK,WAAWuB,OAAOyB,EAAmB,IAIlD,IAAK,IAAI1B,EAAI,EAAGA,EAAI,EAAK3B,MAAMK,WAAWC,OAAQqB,IAChD,GAAI,EAAK3B,MAAMsB,aAAaC,SAAS,EAAKvB,MAAMK,WAAWsB,GAAGlC,MAAO,CACnE,IAAMkE,EAAa,EAAK3D,MAAMK,WAAWsB,GAAG8B,UACtCG,EAAQ,EAAK5D,MAAMK,WAAWsB,GAAGlC,KAGvC,IAAK,IAAI+D,KAAQG,EACf,GAAIH,EAAO,EAAKxC,WAAawC,EAAO,EAAKpC,eAEvC,GAAIuC,EAAWH,GAAO,CACpB,IACMK,EADYF,EAAWH,GACL,YAGpBL,GAAS,EACPD,EAAKE,GAAL,OAA2BI,IAC7BN,EAAKE,GAAUQ,GAASC,EACxBT,GAAY,IAGdF,EAAKQ,QAAQ,CACXF,KAAMA,IAERN,EAAK,GAAGU,GAASC,GAKzBT,EAAWF,EAAK5C,OAAS,EACzB6C,GAAS,EAGb,OAAOD,GAjWK,EAqWdjC,mBAAqB,WAGnB,IAFA,IAAM6C,EAAO,GAEJnC,EAAI,EAAGA,EAAI,EAAK3B,MAAMK,WAAWC,OAAQqB,IAChDmC,EAAKjC,KAAK,EAAK7B,MAAMK,WAAWsB,GAAGlC,MAErC,OAAOqE,GAzWP,EAAKC,QAAU,EACf,EAAKtE,KAAO,GACZ,EAAKE,OAAS,EACd,EAAKqE,cAAgB,GACrB,EAAKtE,mBAAqB,EAC1B,EAAKE,sBAAwB,EAC7B,EAAKoB,UAAY,IAAIiD,KACrB,EAAK7C,SAAW,IAAI6C,KACpB,EAAKxC,WAAY,EACjB,EAAKyC,SAAW,GAChB,EAAKT,UAAY,GACjB,EAAKU,QAAU,CACb,CAAErF,OAAQ,YAAasF,UAAW,QAClC,CAAEtF,OAAQ,aAAcsF,UAAW,sBACnC,CAAEtF,OAAQ,SAAUsF,UAAW,UAC/B,CAAEtF,OAAQ,oBAAqBsF,UAAW,0BAE5C,EAAKpE,MAAQ,CACXK,WAAY,GACZiB,aAAc,IArBJ,E,0MA0GZ,IADI+C,GAAqB,EAChBC,EAAI,EAAGA,EAAInF,KAAKa,MAAMK,WAAWC,OAAQgE,IAC5CnF,KAAKa,MAAMK,WAAWiE,GAAG7E,OAASN,KAAKM,OACzC4E,GAAqB,EACrB9D,MACE,4F,GAKD8D,E,uBAGU,8CACA,2BACA,WACE,oBACTE,EAASpF,KAAKM,KACL,mBAGT+E,EARO,8CAQIC,OALF,oBAFF,2BAOyBF,EANzB,WAGE,oB,UAIQG,MAAMF,G,eAAvBG,E,iBACaA,EAASC,O,QAAtBC,E,OAGN1F,KAAK+E,SAAWW,EAAK,aACrB1F,KAAKsE,UAAYoB,EAAK,uBAEtB1F,KAAKgD,SAAS,CAAE2C,SAAS,SAGCC,IAAtBF,EAAK,aACPtE,MACE,oEAEOyE,MAAM7F,KAAKQ,QACpBY,MACE,oEAEOpB,KAAKQ,QAAU,EACxBY,MACE,sEAIFpB,KAAK6E,cAAgBa,EAAK,aAAa,qBAAqBI,UAC1D,EACA,IAEF9F,KAAKO,mBACHmF,EAAK,uBAAuB1F,KAAK6E,eAAe,YAClD7E,KAAKO,mBACHwF,KAAKC,MAAgC,IAA1BhG,KAAKO,oBAA4B,IAC9CP,KAAKS,sBAAwBT,KAAKO,mBAAqBP,KAAKQ,OAE5DR,KAAK6B,UAAY,IAAIiD,MACnB,IAAIA,MAAOmB,SAAQ,IAAInB,MAAOoB,UAAY,MAC1CC,mBAAmB,SACrBnG,KAAKiC,UAAW,IAAI6C,MAAOqB,mBAAmB,SAC9CnG,KAAKsC,WAAY,EACjBtC,KAAK4E,QAAU5E,KAAK4E,QAAU,GACxB/B,EAAiBC,OAAOC,OAAO,GAAI/C,KAAKa,MAAMK,aACrCwB,KAAK,CAClBkC,QAAS5E,KAAK4E,QACdtE,KAAMN,KAAKM,KACXE,OAAQR,KAAKQ,OACbuE,SAAU/E,KAAK+E,SACfT,UAAWtE,KAAKsE,UAChBzC,UAAW7B,KAAK6B,UAChBI,SAAUjC,KAAKiC,SACfK,UAAWtC,KAAKsC,UAChBuC,cAAe7E,KAAK6E,cACpBpE,sBAAuBT,KAAKS,sBAC5BF,mBAAoBP,KAAKO,sBAErB6F,EAAmBtD,OAAOC,OAAO,GAAI/C,KAAKa,MAAMsB,eACrCO,KAAK1C,KAAKM,MAE3BN,KAAKgD,SAAS,CACZ9B,WAAY2B,EACZV,aAAciE,IAEhBhF,MAAM,aAAepB,KAAKM,KAAO,sC,mRAaxB,8CACU,6CACR,yBACA,mBAGT+E,EANO,8CAMIC,OAJF,yBADQ,6CAER,oB,SAIQC,MAAMF,G,cAAvBG,E,iBACaA,EAASC,O,QAAtBC,E,OAEFW,EAAOC,WACTZ,EAAK,mCAAmC,qBAEtCa,EAAWvG,KAAKO,mBAAqB8F,EACzCrG,KAAKgD,SAAS,CAAEzC,mBAAoBgG,IACpCC,QAAQC,IAAI,0BAA4BF,G,mRAY3B,8CACU,6CACR,yBACA,mBAGTlB,EANO,8CAMIC,OAJF,yBADQ,6CAER,oB,SAIQC,MAAMF,G,cAAvBG,E,iBACaA,EAASC,O,QAAtBC,E,OAEFW,EAAOC,WACTZ,EAAK,mCAAmC,qBAEtCa,EAAWvG,KAAKO,mBAAqB8F,EACzCrG,KAAKgD,SAAS,CAAEzC,mBAAoBgG,IACpCC,QAAQC,IAAI,0BAA4BzG,KAAKO,oB,sIA2HrC,IAAD,OACP,OACE,yBAAKX,UAAU,gBACb,gCAASI,KAAKC,MAAMK,MACpB,6BACA,2DAAyC,IACxCN,KAAKqD,0BACN,6BACE,6BACA,6BACA,4BACGrD,KAAKa,MAAMK,WAAWwF,KAAI,SAACpG,EAAMsC,GAChC,OACE,kBAAC,EAAD,CACEY,IAAKlD,EAAK+B,GACVA,GAAI/B,EAAK+B,GACT/B,KAAMA,EAAKA,KACXC,mBAAoBD,EAAKC,mBACzBE,sBAAuBH,EAAKG,sBAC5BD,OAAQF,EAAKE,OACbG,OAAQ,EAAKgC,YAAYgE,KAAK,EAAM/D,SAK5C,yBAAKhD,UAAU,oBACb,4BACEA,UAAU,WACVgH,oBAAkB,iBAClBlG,QAAS,SAAAmG,GAAC,OAAI,EAAK7D,SAAS,CAAElC,iBAAiB,MAHjD,aAOA,4BACElB,UAAU,YACVgH,oBAAkB,iBAClBlG,QAAS,SAAAmG,GAAC,OAAI,EAAK7D,SAAS,CAAEjC,iBAAiB,MAHjD,cAOA,4BACEnB,UAAU,iBACVc,QAASV,KAAKiD,0BAFhB,qBAMA,4BACErD,UAAU,iBACVc,QAASV,KAAKmD,0BAFhB,gBAMA,4BAAQvD,UAAU,kBAAkBc,QAASV,KAAKC,MAAMU,QAAxD,WAMDX,KAAKa,MAAMC,gBACV,yBAAKlB,UAAU,gBAAgByC,GAAG,iBAChC,yBAAKzC,UAAU,uBACb,yBAAKA,UAAU,SAAf,0BACA,4BACEA,UAAU,eACVc,QAAS,SAAAmG,GAAC,OAAI,EAAK7D,SAAS,CAAElC,iBAAiB,MAFjD,MAOF,yBAAKlB,UAAU,qBAAf,wBACwB,IACtB,2BAAO+D,KAAK,OAAOmD,OAAQ9G,KAAKsB,WAChC,6BAHF,0BAI0B,IACxB,2BAAOqC,KAAK,OAAOmD,OAAQ9G,KAAK2B,iBAChC,6BACA,6BACA,4BAAQjB,QAASV,KAAKiB,UAAtB,0BACA,6BATF,qEAaA,yBAAKoB,GAAG,aAER,KAGHrC,KAAKa,MAAME,gBACV,yBAAKnB,UAAU,gBAAgByC,GAAG,iBAChC,yBAAKzC,UAAU,uBACb,yBAAKA,UAAU,SAAf,2BACA,4BACEA,UAAU,eACVc,QAAS,SAAAmG,GAAC,OAAI,EAAK7D,SAAS,CAAEjC,iBAAiB,MAFjD,UAOF,yBAAKnB,UAAU,qBACb,yBAAKA,UAAU,aAAf,qBACoB,6BAClB,+BACE,+BAAQI,KAAKyD,wBAGjB,yBAAK7D,UAAU,SACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEmH,MAAO,IACPC,YAAW,GACXC,OAAQ,IACRvB,KAAM1F,KAAK+B,oBACXmF,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,CAAO5D,KAAK,SAAS6D,OAAQ,CAAC,EAAG,OACjC,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACCzH,KAAK8B,qBAAqB4E,KAAI,SAAArE,GAC7B,OACE,kBAAC,IAAD,CAAMsB,KAAK,WAAW4D,QAASlF,EAAIqF,KAAK,UAMlD,yBAAK9H,UAAU,cACb,2BACE+D,KAAK,OACLtB,GAAG,YACHyB,KAAK,mBACLD,SAAU7D,KAAK4B,kBACf+F,aAAc,IAAI7C,MAChB,IAAIA,MAAOmB,SAAQ,IAAInB,MAAOoB,UAAY,MAC1CC,mBAAmB,WAEvB,2BACExC,KAAK,OACLtB,GAAG,UACHyB,KAAK,iBACLD,SAAU7D,KAAKgC,gBACf2F,cAAc,IAAI7C,MAAOqB,mBAAmB,WAE9C,4BAAQzF,QAASV,KAAK+B,mBAAtB,gBAGJ,yBAAKM,GAAG,aAER,KAEJ,mC,GAtgB6BlC,IAAMC,YCVxBwH,E,YACnB,aAAe,IAAD,8BACZ,+CAUFC,gBAAkB,SAAAjF,GAChB,IAAMkF,EAAqBhF,OAAOC,OAAO,GAAI,EAAKlC,MAAMkH,gBACxDD,EAAmBrF,OAAOG,EAAO,GACjC,EAAKI,SAAS,CACZ+E,eAAgBD,KAfN,EAoBdE,aAAe,SAAAzG,GACb,EAAKjB,KAAOiB,EAAQC,OAAOC,OArBf,EAyBdwG,aAAe,WACb,GAAI,EAAKpH,MAAMkH,eAAe5G,QAAU,GACtCC,MAAM,kDACD,CAGL,IAFA,IAAI8G,GAAgB,EAEX1F,EAAI,EAAGA,EAAI,EAAK3B,MAAMkH,eAAe5G,OAAQqB,IAElD,EAAKlC,KAAK6H,gBACV,EAAKtH,MAAMkH,eAAevF,GAAGlC,KAAK6H,gBAElC3B,QAAQC,IAAI,EAAKnG,KAAK6H,eACtB/G,MAAM,2DACN8G,GAAgB,GAGpB,GAAKA,EAWHA,GAAgB,MAXE,CAClB,EAAKE,YAAc,EAAKA,YAAc,EACtC,IAAMN,EAAqBhF,OAAOC,OAAO,GAAI,EAAKlC,MAAMkH,gBACxDD,EAAmBpF,KAAK,CACtBL,GAAI,EAAK+F,YACT9H,KAAM,EAAKA,OAEb,EAAK0C,SAAS,CACZ+E,eAAgBD,OAjDV,EA0DdO,qBAAuB,SAAAC,GACrB,EAAKC,eAAiBD,GAzDtB,EAAKF,YAAc,EACnB,EAAK9H,KAAO,GACZ,EAAKiI,eAAiB,EACtB,EAAK1H,MAAQ,CACXkH,eAAgB,IANN,E,sEA8DJ,IAAD,OACP,OACE,yBAAKnI,UAAU,OACb,kBAAC,EAAD,CAAQM,MAAO,0BACf,2BAAOyD,KAAK,OAAOmD,OAAQ9G,KAAKgI,eAChC,4BAAQtH,QAASV,KAAKiI,cAAtB,iBACA,4BACE,yBAAKrI,UAAU,iBACZI,KAAKa,MAAMkH,eAAerB,KAAI,SAACpG,EAAMsC,GACpC,OACE,kBAAC,EAAD,CACEY,IAAKlD,EAAK+B,GACVA,GAAI/B,EAAK+B,GACT/B,KAAMA,EAAKA,KACXK,OAAQ,EAAKkH,gBAAgBlB,KAAK,EAAM/D,e,GA7EzBzC,IAAMC,WCOnBoI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5f0bbc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\n\r\nexport class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        {/* This title can be used as the portfolio title */}\r\n        <h1 className=\"App-title\">{this.props.title}</h1>{\" \"}\r\n        {/* Example of how to display object values <div>{this.props.myObj.b}</div>*/}\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class StocksFromAlphaVantage extends React.Component {\r\n  render() {\r\n    return (\r\n      /**The display settings of how a stock is presented in the portfolio */\r\n      <div>\r\n        Stock: {this.props.body} Current price: {this.props.currentPriceToShow}{\" \"}\r\n        Amount: {this.props.amount} Total value:{\" \"}\r\n        {this.props.stockTotalValueToShow}\r\n        <button onClick={this.props.delete}>X</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport StocksFromAlphaVantage from \"./Stocks\";\r\nimport \"../Portfolio.css\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport \"react-table/react-table.css\";\r\n\r\nexport default class Portfolio extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.StockId = 0;\r\n    this.body = \"\";\r\n    this.amount = 0;\r\n    this.lastRefreshed = \"\";\r\n    this.currentPriceToShow = 0;\r\n    this.stockTotalValueToShow = 0;\r\n    this.startDate = new Date();\r\n    this.lastDate = new Date();\r\n    this.isChecked = true;\r\n    this.metaData = [];\r\n    this.dailyData = [];\r\n    this.columns = [\r\n      { Header: \"StockName\", fieldname: \"body\" },\r\n      { Header: \"StockPrice\", fieldname: \"currentPriceToShow\" },\r\n      { Header: \"Amount\", fieldname: \"amount\" },\r\n      { Header: \"Total stock price\", fieldname: \"stockTotalValueToShow\" }\r\n    ];\r\n    this.state = {\r\n      stockArray: [],\r\n      checkedArray: []\r\n    };\r\n  }\r\n\r\n  /**State for the addStock window */\r\n  state = {\r\n    addStockVisible: false\r\n  };\r\n\r\n  /**State for the showGraph window */\r\n  state = {\r\n    addGraphVisible: false\r\n  };\r\n\r\n  /**State to show USD */\r\n  state = {\r\n    showUSD: true\r\n  };\r\n\r\n  /**Adding the stock to a copy of the stockArray,\r\n   * will be added later if the stock entered is valid in\r\n   * the method getStockData */\r\n  addStock = () => {\r\n    if (this.state.stockArray.length >= 50) {\r\n      alert(\"You can not add more than 50 stocks in a portfolio\");\r\n    } else {\r\n      /**Method for getting the stock data */\r\n      this.getStockData();\r\n    }\r\n  };\r\n\r\n  /*Storing the stock name */\r\n  newStock = element => {\r\n    this.body = element.target.value.toUpperCase();\r\n  };\r\n\r\n  /**Storing the amount of certain stock */\r\n  newStockAmount = element => {\r\n    this.amount = element.target.value;\r\n  };\r\n\r\n  /**Storing the first selected date for the graph */\r\n  setGraphStartDate = element => {\r\n    this.startDate = element.target.value;\r\n    this.generateGraphLines();\r\n    this.generateGraphRows();\r\n  };\r\n\r\n  /**Storing the last selected date for the graph */\r\n  setGraphEndDate = element => {\r\n    this.lastDate = element.target.value;\r\n    this.generateGraphLines();\r\n    this.generateGraphRows();\r\n  };\r\n\r\n  /**Changes the checked state for the checkboxes for the graph */\r\n  changeChecked = element => {\r\n    if (this.state.checkedArray.includes(element.target.id)) {\r\n      this.isChecked = false;\r\n      var indexToBeRemoved = 0;\r\n      for (var i = 0; i < this.state.checkedArray.length; i++) {\r\n        if (this.state.checkedArray[i] === element.target.id) {\r\n          indexToBeRemoved = i;\r\n        }\r\n      }\r\n      this.state.checkedArray.splice(indexToBeRemoved, 1);\r\n    } else {\r\n      this.isChecked = true;\r\n      this.state.checkedArray.push(element.target.id);\r\n    }\r\n  };\r\n\r\n  /**Delete stock from portfolio */\r\n  deleteStock = index => {\r\n    const copyStockArray = Object.assign([], this.state.stockArray);\r\n    copyStockArray.splice(index, 1);\r\n    this.setState({\r\n      stockArray: copyStockArray\r\n    });\r\n  };\r\n\r\n  /**Method for getting the stock data from alphavantage */\r\n  async getStockData() {\r\n    /**Checks if the just added stock already is in the portfolio, if true it will not add it again */\r\n    var stockAlreadyExists = false;\r\n    for (var j = 0; j < this.state.stockArray.length; j++) {\r\n      if (this.state.stockArray[j].body === this.body) {\r\n        stockAlreadyExists = true;\r\n        alert(\r\n          \"The stock you entered is already in your portfolio, you cannot add the same stock again\"\r\n        );\r\n      }\r\n    }\r\n    /**If the stock is not present in the portfolio this will query API */\r\n    if (!stockAlreadyExists) {\r\n      /*\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MSFT&apikey=HRVEIW5PUW3N2CRS\"*/\r\n      /*Url parameters */\r\n      const url1 = \"https://www.alphavantage.co/query?function=\";\r\n      const url2 = \"&outputsize=full&symbol=\";\r\n      const url3 = \"&apikey=\";\r\n      const series = \"TIME_SERIES_DAILY\";\r\n      const symbol = this.body;\r\n      const apikey = \"HRVEIW5PUW3N2CRS\";\r\n\r\n      /*Request to alphavantage */\r\n      const url = url1.concat(series, url2, symbol, url3, apikey);\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      /**Storing the stock data */\r\n      this.metaData = data[\"Meta Data\"];\r\n      this.dailyData = data[\"Time Series (Daily)\"];\r\n\r\n      this.setState({ loading: false });\r\n\r\n      /**If the stock can not be found the stock is not added to the portfolio */\r\n      if (data[\"Meta Data\"] === undefined) {\r\n        alert(\r\n          \"The symbol for the stock you entered can not be found, try again\"\r\n        );\r\n      } else if (isNaN(this.amount)) {\r\n        alert(\r\n          \"The number of the amount of stocks has to be a number, try again\"\r\n        );\r\n      } else if (this.amount <= 0) {\r\n        alert(\r\n          \"The number of the amount of stocks has to be atleast 1, try again\"\r\n        );\r\n      } else {\r\n        /**Storing the stock data that need values to work */\r\n        this.lastRefreshed = data[\"Meta Data\"][\"3. Last Refreshed\"].substring(\r\n          0,\r\n          10\r\n        );\r\n        this.currentPriceToShow =\r\n          data[\"Time Series (Daily)\"][this.lastRefreshed][\"4. close\"];\r\n        this.currentPriceToShow =\r\n          Math.round(this.currentPriceToShow * 100) / 100;\r\n        this.stockTotalValueToShow = this.currentPriceToShow * this.amount;\r\n\r\n        this.startDate = new Date(\r\n          new Date().setDate(new Date().getDate() - 100)\r\n        ).toLocaleDateString(\"en-CA\");\r\n        this.lastDate = new Date().toLocaleDateString(\"en-CA\");\r\n        this.isChecked = true;\r\n        this.StockId = this.StockId + 1;\r\n        const copyStockArray = Object.assign([], this.state.stockArray);\r\n        copyStockArray.push({\r\n          StockId: this.StockId,\r\n          body: this.body,\r\n          amount: this.amount,\r\n          metaData: this.metaData,\r\n          dailyData: this.dailyData,\r\n          startDate: this.startDate,\r\n          lastDate: this.lastDate,\r\n          isChecked: this.isChecked,\r\n          lastRefreshed: this.lastRefreshed,\r\n          stockTotalValueToShow: this.stockTotalValueToShow,\r\n          currentPriceToShow: this.currentPriceToShow\r\n        });\r\n        const copyCheckedArray = Object.assign([], this.state.checkedArray);\r\n        copyCheckedArray.push(this.body);\r\n\r\n        this.setState({\r\n          stockArray: copyStockArray,\r\n          checkedArray: copyCheckedArray\r\n        });\r\n        alert(\"The stock \" + this.body + \" has been added to the portfolio!\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**Methods for changing the currency from USD to EUR */\r\n  changeExchangeRateUSDEUR = () => {\r\n    this.setState({ showUSD: false }, this.getExchangeRateUSDEUR);\r\n  };\r\n\r\n  async getExchangeRateUSDEUR() {\r\n    //https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=HRVEIW5PUW3N2CRS\r\n    /*Url parameters */\r\n    const url1 = \"https://www.alphavantage.co/query?function=\";\r\n    const fromToCurrency = \"&from_currency=USD&to_currency=EUR&apikey=\";\r\n    const series = \"CURRENCY_EXCHANGE_RATE\";\r\n    const apikey = \"HRVEIW5PUW3N2CRS\";\r\n\r\n    /*Request to alphavantage */\r\n    const url = url1.concat(series, fromToCurrency, apikey);\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    var rate = parseFloat(\r\n      data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]\r\n    );\r\n    var newPrice = this.currentPriceToShow * rate;\r\n    this.setState({ currentPriceToShow: newPrice });\r\n    console.log(\"Current price to show: \" + newPrice);\r\n  }\r\n\r\n  /**Methods for changing the currency from EUR to USD */\r\n  changeExchangeRateEURUSD = () => {\r\n    this.setState({ showUSD: true });\r\n    this.getExchangeRateEURUSD();\r\n  };\r\n\r\n  async getExchangeRateEURUSD() {\r\n    //https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=EUR&to_currency=USD&apikey=HRVEIW5PUW3N2CRS\r\n    /*Url parameters */\r\n    const url1 = \"https://www.alphavantage.co/query?function=\";\r\n    const fromToCurrency = \"&from_currency=EUR&to_currency=USD&apikey=\";\r\n    const series = \"CURRENCY_EXCHANGE_RATE\";\r\n    const apikey = \"HRVEIW5PUW3N2CRS\";\r\n\r\n    /*Request to alphavantage */\r\n    const url = url1.concat(series, fromToCurrency, apikey);\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    var rate = parseFloat(\r\n      data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]\r\n    );\r\n    var newPrice = this.currentPriceToShow * rate;\r\n    this.setState({ currentPriceToShow: newPrice });\r\n    console.log(\"Current price to show: \" + this.currentPriceToShow);\r\n  }\r\n\r\n  /**Method for calculating the value of the whole portfolio */\r\n  calculatePortfolioPrice = () => {\r\n    var totalValue = 0;\r\n    for (var i = 0; i < this.state.stockArray.length; i++) {\r\n      totalValue += this.state.stockArray[i].stockTotalValueToShow;\r\n    }\r\n    return totalValue;\r\n  };\r\n\r\n  /**Getting the correct status for if a stock is selected or not */\r\n  getCheckedStatus = key => {\r\n    if (this.state.checkedArray.includes(key)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**Mehtod for creating the list of stocks for the graph */\r\n  createListOfStocks = () => {\r\n    let table = [];\r\n    for (var i = 0; i < this.state.stockArray.length; i++) {\r\n      table.push(<tr></tr>);\r\n      table.push(\r\n        <td key={this.state.stockArray[i].body}>\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={this.getCheckedStatus(\r\n              this.state.stockArray[i].body\r\n            )}\r\n            onChange={this.changeChecked}\r\n            name={this.state.stockArray[i].body}\r\n            id={this.state.stockArray[i].body}\r\n          />\r\n        </td>\r\n      );\r\n      table.push(\r\n        <td key={this.state.stockArray[i].body}>\r\n          {this.state.stockArray[i].body}\r\n        </td>\r\n      );\r\n    }\r\n    return table;\r\n  };\r\n\r\n  /**Generating data for all the stocks in the portfolio */\r\n  generateGraphRows = () => {\r\n    const rows = [];\r\n    var count = 0;\r\n    var rowcount = 0;\r\n    var longestStockIndex = 0;\r\n    var length = 0;\r\n    var currentLongestLength = 0;\r\n\r\n    /**Finding stock with data furthest back to prevent array index out of bounds later */\r\n    for (var k = 0; k < this.state.stockArray.length; k++) {\r\n      if (this.state.checkedArray.includes(this.state.stockArray[k].body)) {\r\n        for (var date in this.state.stockArray[k].dailyData) {\r\n          length += 1;\r\n        }\r\n        if (length > currentLongestLength) {\r\n          currentLongestLength = length;\r\n          longestStockIndex = k;\r\n        }\r\n        length = 0;\r\n      }\r\n    }\r\n    /**This switches the stock with the longest values first to the array */\r\n    if (longestStockIndex !== 0) {\r\n      this.state.stockArray.unshift(this.state.stockArray[longestStockIndex]);\r\n      longestStockIndex += 1;\r\n      this.state.stockArray.splice(longestStockIndex, 1);\r\n    }\r\n\r\n    /**Looping through all the stocks */\r\n    for (var i = 0; i < this.state.stockArray.length; i++) {\r\n      if (this.state.checkedArray.includes(this.state.stockArray[i].body)) {\r\n        const timeSeries = this.state.stockArray[i].dailyData;\r\n        const stock = this.state.stockArray[i].body;\r\n\r\n        /**Adding each of the stocks to the rows */\r\n        for (var date in timeSeries) {\r\n          if (date < this.startDate || date > this.lastDate) {\r\n          } else {\r\n            if (timeSeries[date]) {\r\n              const stockData = timeSeries[date];\r\n              const close = stockData[\"4. close\"];\r\n\r\n              /**If there already is something added to rows this will add the new stocks to the same dates*/\r\n              if (count >= 1) {\r\n                if (rows[rowcount][\"date\"] === date) {\r\n                  rows[rowcount][stock] = close;\r\n                  rowcount -= 1;\r\n                }\r\n              } else {\r\n                rows.unshift({\r\n                  date: date\r\n                });\r\n                rows[0][stock] = close;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        rowcount = rows.length - 1;\r\n        count += 1;\r\n      }\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  /**Generating Lines for the graph */\r\n  generateGraphLines = () => {\r\n    const test = [];\r\n    /**Looping through all the stocks */\r\n    for (var i = 0; i < this.state.stockArray.length; i++) {\r\n      test.push(this.state.stockArray[i].body);\r\n    }\r\n    return test;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"OnePortfolio\">\r\n        <strong>{this.props.body}</strong>\r\n        <br />\r\n        <strong>Portfiolio total price:</strong>{\" \"}\r\n        {this.calculatePortfolioPrice()}\r\n        <div>\r\n          <br />\r\n          <br />\r\n          <ul>\r\n            {this.state.stockArray.map((body, index) => {\r\n              return (\r\n                <StocksFromAlphaVantage\r\n                  key={body.id}\r\n                  id={body.id}\r\n                  body={body.body}\r\n                  currentPriceToShow={body.currentPriceToShow}\r\n                  stockTotalValueToShow={body.stockTotalValueToShow}\r\n                  amount={body.amount}\r\n                  delete={this.deleteStock.bind(this, index)}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n          <div className=\"PortfolioButtons\">\r\n            <button\r\n              className=\"AddStock\"\r\n              data-modal-target=\"#addStockPopup\"\r\n              onClick={e => this.setState({ addStockVisible: true })}\r\n            >\r\n              Add stock\r\n            </button>\r\n            <button\r\n              className=\"PerfGraph\"\r\n              data-modal-target=\"#addGraphPopup\"\r\n              onClick={e => this.setState({ addGraphVisible: true })}\r\n            >\r\n              Perf graph\r\n            </button>\r\n            <button\r\n              className=\"ChangeCurrency\"\r\n              onClick={this.changeExchangeRateUSDEUR}\r\n            >\r\n              Display in €\r\n            </button>\r\n            <button\r\n              className=\"ChangeCurrency\"\r\n              onClick={this.changeExchangeRateEURUSD}\r\n            >\r\n              Display in $\r\n            </button>\r\n            <button className=\"DeletePortfolio\" onClick={this.props.delete}>\r\n              Delete\r\n            </button>\r\n          </div>\r\n\r\n          {/**Add stock popup window */}\r\n          {this.state.addStockVisible ? (\r\n            <div className=\"addStockPopup\" id=\"addStockPopup\">\r\n              <div className=\"addStockPopupHeader\">\r\n                <div className=\"title\">Add stock to portfolio</div>\r\n                <button\r\n                  className=\"close-button\"\r\n                  onClick={e => this.setState({ addStockVisible: false })}\r\n                >\r\n                  X\r\n                </button>\r\n              </div>\r\n              <div className=\"addStockPopupBody\">\r\n                Symbol name of stock:{\" \"}\r\n                <input type=\"text\" onBlur={this.newStock} />\r\n                <br />\r\n                Amount of shares owned:{\" \"}\r\n                <input type=\"text\" onBlur={this.newStockAmount} />\r\n                <br />\r\n                <br />\r\n                <button onClick={this.addStock}>Add stock to portfolio</button>\r\n                <br />\r\n                (The fetching of the stock values might take a while, be\r\n                patient)\r\n              </div>\r\n              <div id=\"overlay\"></div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {/**Add graph popup window */}\r\n          {this.state.addGraphVisible ? (\r\n            <div className=\"addGraphPopup\" id=\"addGraphPopup\">\r\n              <div className=\"addGraphPopupHeader\">\r\n                <div className=\"title\">Stock Performance Graph</div>\r\n                <button\r\n                  className=\"close-button\"\r\n                  onClick={e => this.setState({ addGraphVisible: false })}\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n              <div className=\"addGraphPopupBody\">\r\n                <div className=\"stockList\">\r\n                  List stocks here: <br />\r\n                  <table>\r\n                    <tbody>{this.createListOfStocks()}</tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"graph\">\r\n                  <ResponsiveContainer>\r\n                    <LineChart\r\n                      width={600}\r\n                      max-width={80}\r\n                      height={300}\r\n                      data={this.generateGraphRows()}\r\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n                    >\r\n                      <XAxis dataKey=\"date\" />\r\n                      <YAxis type=\"number\" domain={[0, 300]} />\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <Tooltip />\r\n                      <Legend />\r\n                      {this.generateGraphLines().map(id => {\r\n                        return (\r\n                          <Line type=\"monotone\" dataKey={id} dot={false} />\r\n                        );\r\n                      })}\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n                <div className=\"graphDates\">\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"startDate\"\r\n                    name=\"Stock start date\"\r\n                    onChange={this.setGraphStartDate}\r\n                    defaultValue={new Date(\r\n                      new Date().setDate(new Date().getDate() - 100)\r\n                    ).toLocaleDateString(\"en-CA\")}\r\n                  ></input>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"endDate\"\r\n                    name=\"Stock end date\"\r\n                    onChange={this.setGraphEndDate}\r\n                    defaultValue={new Date().toLocaleDateString(\"en-CA\")}\r\n                  ></input>\r\n                  <button onClick={this.generateGraphRows}>Apply date</button>\r\n                </div>\r\n              </div>\r\n              <div id=\"overlay\"></div>\r\n            </div>\r\n          ) : null}\r\n\r\n          <br />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header\";\nimport Portfolio from \"./components/Portfolio\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.portfolioId = 0;\n    this.body = \"\";\n    this.portfolioPrice = 0;\n    this.state = {\n      portfolioArray: []\n    };\n  }\n\n  /**Method for deleting the selected portfolio */\n  deletePortfolio = index => {\n    const copyPortfolioArray = Object.assign([], this.state.portfolioArray);\n    copyPortfolioArray.splice(index, 1);\n    this.setState({\n      portfolioArray: copyPortfolioArray\n    });\n  };\n\n  /**Storing the value of the portfolio to be added */\n  newPortfolio = element => {\n    this.body = element.target.value;\n  };\n\n  /**Method for adding a portfolio */\n  addPortfolio = () => {\n    if (this.state.portfolioArray.length >= 10) {\n      alert(\"You can not create more than 10 portfolios\");\n    } else {\n      var alreadyExists = false;\n      /**Prevents an portfolio with the same name to be made */\n      for (var i = 0; i < this.state.portfolioArray.length; i++) {\n        if (\n          this.body.toLowerCase() ===\n          this.state.portfolioArray[i].body.toLowerCase()\n        ) {\n          console.log(this.body.toLowerCase());\n          alert(\"Portfolio with the same name already exists, try again!\");\n          alreadyExists = true;\n        }\n      }\n      if (!alreadyExists) {\n        this.portfolioId = this.portfolioId + 1;\n        const copyPortfolioArray = Object.assign([], this.state.portfolioArray);\n        copyPortfolioArray.push({\n          id: this.portfolioId,\n          body: this.body\n        });\n        this.setState({\n          portfolioArray: copyPortfolioArray\n        });\n      } else {\n        alreadyExists = false;\n      }\n    }\n  };\n\n  /**Updates to total price for a portfolio */\n  changePortfolioPrice = totalPrice => {\n    this.portfolioPrice = totalPrice;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title={\"Welcome to your SPMS!\"} />\n        <input type=\"text\" onBlur={this.newPortfolio} />\n        <button onClick={this.addPortfolio}>Add Portfolio</button>\n        <ul>\n          <div className=\"PortfolioItem\">\n            {this.state.portfolioArray.map((body, index) => {\n              return (\n                <Portfolio\n                  key={body.id}\n                  id={body.id}\n                  body={body.body}\n                  delete={this.deletePortfolio.bind(this, index)}\n                />\n              );\n            })}\n          </div>\n        </ul>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}